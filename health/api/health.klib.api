// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <HealthKMP:health>
abstract interface com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health/HealthAggregatedRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthManager { // com.viktormykhailiv.kmp.health/HealthManager|null[0]
    abstract fun isAvailable(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAvailable|isAvailable(){}[0]
    abstract suspend fun aggregate(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<com.viktormykhailiv.kmp.health/HealthAggregatedRecord> // com.viktormykhailiv.kmp.health/HealthManager.aggregate|aggregate(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun isAuthorized(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAuthorized|isAuthorized(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun isRevokeAuthorizationSupported(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isRevokeAuthorizationSupported|isRevokeAuthorizationSupported(){}[0]
    abstract suspend fun readData(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>> // com.viktormykhailiv.kmp.health/HealthManager.readData|readData(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun requestAuthorization(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.requestAuthorization|requestAuthorization(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun revokeAuthorization(): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.revokeAuthorization|revokeAuthorization(){}[0]
    abstract suspend fun writeData(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.writeData|writeData(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthRecord>){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/HealthRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/InstantaneousRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/InstantaneousRecord|null[0]
    abstract val time // com.viktormykhailiv.kmp.health/InstantaneousRecord.time|{}time[0]
        abstract fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/InstantaneousRecord.time.<get-time>|<get-time>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/IntervalRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/IntervalRecord|null[0]
    abstract val endTime // com.viktormykhailiv.kmp.health/IntervalRecord.endTime|{}endTime[0]
        abstract fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    abstract val startTime // com.viktormykhailiv.kmp.health/IntervalRecord.startTime|{}startTime[0]
        abstract fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
}

sealed interface com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType|null[0]
    final object Awake : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.toString|toString(){}[0]
    }

    final object AwakeInBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.toString|toString(){}[0]
    }

    final object Deep : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.toString|toString(){}[0]
    }

    final object Light : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Light|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.toString|toString(){}[0]
    }

    final object OutOfBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.toString|toString(){}[0]
    }

    final object REM : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.REM|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.toString|toString(){}[0]
    }

    final object Sleeping : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.toString|toString(){}[0]
    }

    final object Unknown : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType|null[0]
    final object Sleep : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Sleep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.toString|toString(){}[0]
    }

    final object Steps : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Steps|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Steps.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Steps.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Steps.toString|toString(){}[0]
    }

    final object Weight : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Weight|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Weight.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Weight.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Weight.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord, com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin.time/Duration) // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.time.Duration){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val totalDuration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration|{}totalDuration[0]
        final fun <get-totalDuration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration.<get-totalDuration>|<get-totalDuration>(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord, com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin/Long) // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Long){}[0]

    final val count // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord, com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass) // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/SleepSessionRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage>) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val stages // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages|{}stages[0]
        final fun <get-stages>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages.<get-stages>|<get-stages>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.toString|toString(){}[0]

    final class Stage : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage|null[0]
        constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.records/SleepStageType) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]

        final val dataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.dataType|{}dataType[0]
            final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.dataType.<get-dataType>|<get-dataType>(){}[0]
        final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime|{}endTime[0]
            final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime.<get-endTime>|<get-endTime>(){}[0]
        final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime|{}startTime[0]
            final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime.<get-startTime>|<get-startTime>(){}[0]
        final val type // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type|{}type[0]
            final fun <get-type>(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component1|component1(){}[0]
        final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component2|component2(){}[0]
        final fun component3(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component3|component3(){}[0]
        final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.records/SleepStageType = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/StepsRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/StepsRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin/Int) // com.viktormykhailiv.kmp.health.records/StepsRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Int){}[0]

    final val count // com.viktormykhailiv.kmp.health.records/StepsRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin/Int = ...): com.viktormykhailiv.kmp.health.records/StepsRecord // com.viktormykhailiv.kmp.health.records/StepsRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/StepsRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/StepsRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/WeightRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/WeightRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Mass) // com.viktormykhailiv.kmp.health.records/WeightRecord.<init>|<init>(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/WeightRecord.time|{}time[0]
        final fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.time.<get-time>|<get-time>(){}[0]
    final val weight // com.viktormykhailiv.kmp.health.records/WeightRecord.weight|{}weight[0]
        final fun <get-weight>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.weight.<get-weight>|<get-weight>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.component2|component2(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ...): com.viktormykhailiv.kmp.health.records/WeightRecord // com.viktormykhailiv.kmp.health.records/WeightRecord.copy|copy(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/WeightRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/WeightRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/WeightRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.units/Mass : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Mass> { // com.viktormykhailiv.kmp.health.units/Mass|null[0]
    final val inGrams // com.viktormykhailiv.kmp.health.units/Mass.inGrams|{}inGrams[0]
        final fun <get-inGrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inGrams.<get-inGrams>|<get-inGrams>(){}[0]
    final val inKilograms // com.viktormykhailiv.kmp.health.units/Mass.inKilograms|{}inKilograms[0]
        final fun <get-inKilograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inKilograms.<get-inKilograms>|<get-inKilograms>(){}[0]
    final val inMicrograms // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms|{}inMicrograms[0]
        final fun <get-inMicrograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms.<get-inMicrograms>|<get-inMicrograms>(){}[0]
    final val inMilligrams // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams|{}inMilligrams[0]
        final fun <get-inMilligrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams.<get-inMilligrams>|<get-inMilligrams>(){}[0]
    final val inOunces // com.viktormykhailiv.kmp.health.units/Mass.inOunces|{}inOunces[0]
        final fun <get-inOunces>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inOunces.<get-inOunces>|<get-inOunces>(){}[0]
    final val inPounds // com.viktormykhailiv.kmp.health.units/Mass.inPounds|{}inPounds[0]
        final fun <get-inPounds>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inPounds.<get-inPounds>|<get-inPounds>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Mass): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Mass.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Mass.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Mass.Companion|null[0]
        final fun grams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.grams|grams(kotlin.Double){}[0]
        final fun kilograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.kilograms|kilograms(kotlin.Double){}[0]
        final fun micrograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.micrograms|micrograms(kotlin.Double){}[0]
        final fun milligrams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.milligrams|milligrams(kotlin.Double){}[0]
        final fun ounces(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.ounces|ounces(kotlin.Double){}[0]
        final fun pounds(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.pounds|pounds(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health/HealthManagerFactory { // com.viktormykhailiv.kmp.health/HealthManagerFactory|null[0]
    constructor <init>() // com.viktormykhailiv.kmp.health/HealthManagerFactory.<init>|<init>(){}[0]

    final fun createManager(): com.viktormykhailiv.kmp.health/HealthManager // com.viktormykhailiv.kmp.health/HealthManagerFactory.createManager|createManager(){}[0]
}

final val com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop|#static{}com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop|#static{}com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop[0]
final val com.viktormykhailiv.kmp.health.units/com_viktormykhailiv_kmp_health_units_Mass$stableprop // com.viktormykhailiv.kmp.health.units/com_viktormykhailiv_kmp_health_units_Mass$stableprop|#static{}com_viktormykhailiv_kmp_health_units_Mass$stableprop[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Double{}grams[0]
    final fun (kotlin/Double).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Float{}grams[0]
    final fun (kotlin/Float).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Int{}grams[0]
    final fun (kotlin/Int).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Long{}grams[0]
    final fun (kotlin/Long).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Double{}kilograms[0]
    final fun (kotlin/Double).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Float{}kilograms[0]
    final fun (kotlin/Float).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Int{}kilograms[0]
    final fun (kotlin/Int).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Long{}kilograms[0]
    final fun (kotlin/Long).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Double{}micrograms[0]
    final fun (kotlin/Double).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Float{}micrograms[0]
    final fun (kotlin/Float).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Int{}micrograms[0]
    final fun (kotlin/Int).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Long{}micrograms[0]
    final fun (kotlin/Long).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Double{}milligrams[0]
    final fun (kotlin/Double).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Float{}milligrams[0]
    final fun (kotlin/Float).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Int{}milligrams[0]
    final fun (kotlin/Int).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Long{}milligrams[0]
    final fun (kotlin/Long).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Double{}ounces[0]
    final fun (kotlin/Double).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Float{}ounces[0]
    final fun (kotlin/Float).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Int{}ounces[0]
    final fun (kotlin/Int).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Long{}ounces[0]
    final fun (kotlin/Long).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Double{}pounds[0]
    final fun (kotlin/Double).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Float{}pounds[0]
    final fun (kotlin/Float).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Int{}pounds[0]
    final fun (kotlin/Int).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Long{}pounds[0]
    final fun (kotlin/Long).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop|#static{}com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop[0]
final val com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop|#static{}com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop[0]
final val com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop|#static{}com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop[0]
final val com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthKitManager$stableprop // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthKitManager$stableprop|#static{}com_viktormykhailiv_kmp_health_HealthKitManager$stableprop[0]
final val com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop|#static{}com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop[0]
final val com.viktormykhailiv.kmp.health/duration // com.viktormykhailiv.kmp.health/duration|@com.viktormykhailiv.kmp.health.IntervalRecord{}duration[0]
    final fun (com.viktormykhailiv.kmp.health/IntervalRecord).<get-duration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health/duration.<get-duration>|<get-duration>@com.viktormykhailiv.kmp.health.IntervalRecord(){}[0]

final fun com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop_getter|com_viktormykhailiv_kmp_health_aggregate_SleepAggregatedRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop_getter|com_viktormykhailiv_kmp_health_aggregate_StepsAggregatedRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop_getter|com_viktormykhailiv_kmp_health_aggregate_WeightAggregatedRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepSessionRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepSessionRecord_Stage$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_Awake$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_AwakeInBed$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_Deep$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_Light$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_OutOfBed$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_REM$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_Sleeping$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop_getter|com_viktormykhailiv_kmp_health_records_SleepStageType_Unknown$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop_getter|com_viktormykhailiv_kmp_health_records_StepsRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.records/com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop_getter|com_viktormykhailiv_kmp_health_records_WeightRecord$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health.units/com_viktormykhailiv_kmp_health_units_Mass$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health.units/com_viktormykhailiv_kmp_health_units_Mass$stableprop_getter|com_viktormykhailiv_kmp_health_units_Mass$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop_getter|com_viktormykhailiv_kmp_health_HealthDataType_Sleep$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop_getter|com_viktormykhailiv_kmp_health_HealthDataType_Steps$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop_getter|com_viktormykhailiv_kmp_health_HealthDataType_Weight$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthKitManager$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthKitManager$stableprop_getter|com_viktormykhailiv_kmp_health_HealthKitManager$stableprop_getter(){}[0]
final fun com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop_getter(): kotlin/Int // com.viktormykhailiv.kmp.health/com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop_getter|com_viktormykhailiv_kmp_health_HealthManagerFactory$stableprop_getter(){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSleep(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSleep|aggregateSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSteps(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSteps|aggregateSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateWeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateWeight|aggregateWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSleep(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord>> // com.viktormykhailiv.kmp.health/readSleep|readSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSteps(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/StepsRecord>> // com.viktormykhailiv.kmp.health/readSteps|readSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readWeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/WeightRecord>> // com.viktormykhailiv.kmp.health/readWeight|readWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
